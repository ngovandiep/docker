version: '3'

services:
  nginx:
    build:
      context: nginx
      args:
        BUILD_ENVIRONMENT: ${BUILD_ENVIRONMENT}
    networks:
      default-network :
         ipv4_address: ${NGINX_IPV4_ADDRESS}
    ports:
      - ${APP_PORT}:80
      - ${APP_SSL_PORT}:443
    depends_on:
      - phpfpm
    volumes:
      - ${SOURCE_PATH}:${VOLUME_PATH}
  phpfpm:
    build:
      context: php
      args:
        SOURCE_PATH: ${SOURCE_PATH}
        VOLUME_PATH: ${VOLUME_PATH}
        PHP_VERSION: ${PHP_VERSION}
    networks:
      default-network :
         ipv4_address: ${PHPFPM_IPV4_ADDRESS}
    volumes:
      - ${SOURCE_PATH}:${VOLUME_PATH}
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    tty: true
    ports:
      - "6379:6379"
    networks:
      default-network :
         ipv4_address: ${REDIS_IPV4_ADDRESS}
  #MySQL Service
  db:
    image: mysql:8.0
    container_name: db
    command: --default-authentication-plugin=mysql_native_password --sql_mode="" --character-set-server=utf8 --collation-server=utf8_general_ci --secure-file-priv=NULL
    restart: always
    tty: true
    ports:
      - "3306:3306"
    environment:
        MYSQL_DATABASE: test
        MYSQL_USER: mysql
        MYSQL_PASSWORD: 123456
        MYSQL_ROOT_PASSWORD: 123456
        SERVICE_TAGS: dev
        SERVICE_NAME: mysql
    volumes:
      #- dbdata:/var/lib/mysql-files/
      - ./database/init/:/docker-entrypoint-initdb.d/
      - ./mysql/:/etc/mysql/
    networks:
      default-network :
         ipv4_address: ${MYSQL_IPV4_ADDRESS}
  sonarqube:
    image: sonarqube
    depends_on:
      - db
    ports:
      - "9001:9000"
    environment:
      - SONARQUBE_DATABASE_NAME=sonarqubedb
      - SONARQUBE_DATABASE_USER=mysql
      - SONARQUBE_DATABASE_PASSWORD=123456
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    networks:
      default-network :
         ipv4_address: ${SONAR_SERVER_URL}
networks:
  default-network:
    driver: bridge
    ipam:
     config:
       - subnet: ${DOCKER_SUBNET}
volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
